#!/bin/bash -e

# Git script to automatically run:
#   git pull
#   git map fetch --all
#   git map submodule update
# on all of your git repo's within the same parent directory.

# Copyright Â© 2017 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Program information
PROGRAM_NAME="git-autopull"
VERSION="2.0.0"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# This makes sure that $1 doesn't get lost in the running of all the code
if [ $# -ge 1 ]; then CMD_LINE="$1"; fi

# Installing git-map dependency
# It makes sure that the executable exists in the git repo
# Its a submodule
command -v git-map 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/git-map/git-map" ]; then
            sudo ln -svf "${DIR}/git-map/git-map" /usr/local/bin/git-map
            sudo chmod -R 0775 /usr/local/bin/git-map
        else
            echo "The required dependency, git-map, is missing."
            echo "Its in this git repo as a submodule. Please, fix this!"
            exit 1
        fi
    )
}

command -v git-autopull 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/git-autopull/git-autopull" ]; then
            sudo ln -svf "${DIR}/git-autopull/git-autopull" /usr/local/bin/git-autopull
            sudo chmod -R 0775 /usr/local/bin/git-autopull
        else
            echo "For some reason, linking git-autopull to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}


function USAGE() {
cat <<- EOF
${PROGRAM_NAME}

USAGE :
      : run ${PROGRAM_NAME} from within a git repo.
      : Calls git pull, fetch and submodule update --init --recursive

-h | --help     :    Shows this info
EOF
}

function INTERACT() {
    while [ "${CMD_LINE}" -ge 1 ]; do
        case "${CMD_LINE}" in
            -h | --help ) USAGE; exit 0;;
            * ) USAGE; exit 1;;
        esac
    done
}

trap 'exit 1' SIGHUP SIGINT SIGTERM

function main() {
    # This step causes this script to exit on an error code if not called from within
    # a git repo on the command line.
    git rev-parse &>/dev/null || \
        echo "This was run from outside a git repo" \
        exit 1

    # Using the 2>&1 forces any error codes onto the command line
    git map pull 2>&1 &&
    echo ""
    git map fetch --all 2>&1 &&
    echo ""
    git map submodule update --init --recursive 2>&1
}

# https://www.gnu.org/software/bash/manual/html_node/Is-this-Shell-Interactive_003f.html
# This tests if its being run from an interactive shell, solves any `tty` issues
case $- in
    *i* ) INTERACT; main;;
    * ) main;;
esac
